/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input result_s,
    input result_cout,
    output reg input_a,
    output reg input_b,
    output reg input_cin,
    output reg [23:0] io_led
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam STAY_state = 2'd0;
  localparam MOVE_state = 2'd1;
  localparam END_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = STAY_state;
  reg [3:0] M_count_d, M_count_q = 1'h0;
  reg [27:0] M_timer_d, M_timer_q = 1'h0;
  reg [1:0] M_answer_d, M_answer_q = 1'h0;
  
  reg [1:0] result;
  
  always @* begin
    M_state_d = M_state_q;
    M_count_d = M_count_q;
    M_timer_d = M_timer_q;
    M_answer_d = M_answer_q;
    
    io_led = 24'h000000;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    input_a = M_count_q[0+0-:1];
    input_b = M_count_q[1+0-:1];
    input_cin = M_count_q[2+0-:1];
    
    case (M_state_q)
      STAY_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[0+0+2-:3] = M_count_q[0+2-:3];
        io_led[0+5+0-:1] = result_s;
        io_led[0+6+0-:1] = result_cout;
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_timer_d[27+0-:1] = 1'h0;
          result = M_count_q[0+0-:1] + M_count_q[1+0-:1] + M_count_q[2+0-:1];
          io_led[0+3+1-:2] = M_answer_q;
          if (result[1+0-:1] == result_cout && result[0+0-:1] == result_s) begin
            M_state_d = MOVE_state;
            M_answer_d = 1'h0;
          end else begin
            M_answer_d = result;
            M_state_d = STAY_state;
          end
        end
      end
      MOVE_state: begin
        M_count_d = M_count_q + 1'h1;
        if (M_count_q[3+0-:1] == 1'h1) begin
          M_state_d = END_state;
        end else begin
          M_state_d = STAY_state;
        end
      end
      END_state: begin
        io_led[0+7+0-:1] = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_count_q <= 1'h0;
      M_timer_q <= 1'h0;
      M_answer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_count_q <= M_count_d;
      M_timer_q <= M_timer_d;
      M_answer_q <= M_answer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
